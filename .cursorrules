---
Description: Documentation Standards for meows.space
Globs: "**/*.md"
---

# Project Context

meows.space is a URL command multiplexer implementing static and dynamic command templates. It executes locally with offline command management and online URL resolution, using a local-first architecture.

# Documentation Standards

- Document only what exists, not planned features
- Use technical, factual language instead of marketing terms
- Avoid industry buzzwords and trendy terminology
- Avoid subjective descriptors like "comprehensive," "cohesive," "consistent," "powerful," "elegant," etc.
- Replace subjective qualifiers with specific, measurable characteristics
- Don't include statements about future capabilities
- Documentation should explain concepts, not generate implementation code
- Target technical stakeholders with appropriate technical depth
- Be concise and avoid repeating information across documents
- Use shapes and patterns rather than colors for diagram differentiation
- Focus on technical details rather than business value propositions
- Document actual implementation, not potential scenarios
- Don't modify existing table of contents structures
- Avoid using specific counts or numbers that require updates when the system changes
- Use relative or general terms instead of exact quantities for elements that may change

# File Structure

- Include metadata header in all documentation files with:
  - Document name, project, description
  - Target audience and detail level
  - Last updated date
- Maintain complete table of contents with proper hierarchy
- Start with an overview section introducing the document's purpose
- Use clear headings and subheadings for content organization
- Include visual diagrams for complex concepts
- Provide proper cross-references to related documents

# Content Organization

- Core documentation is in the project root (README.md)
- Technical documentation is in separate specialized files
- Flow documentation is organized in the docs/flows/ directory
- Use mermaid diagrams for visual representations
- Use standardized terminology across all documents
- Establish and follow a glossary of technical terms
- Provide code examples where appropriate

# Technical Accuracy

- Ensure all technical details reflect the actual implementation
- Verify that diagrams accurately represent system architecture
- Confirm that code examples are functional and follow project standards
- Validate that API specifications match the implemented endpoints
- Check that flow descriptions match the actual user experience
